import React,{useState} from 'react';
import { Breadcrumb } from 'react-bootstrap'
import { Typography, Button, Grid, OutlinedInput } from '@mui/material';
import { FormControl, FormLabel, Autocomplete, Textarea, Stack } from '@mui/joy';
import { Box, Container, color } from '@mui/system';
import { DateRangePicker } from '@mui/x-date-pickers-pro';
import { AdapterDayjs } from '@mui/x-date-pickers-pro/AdapterDayjs';
import { LocalizationProvider } from '@mui/x-date-pickers-pro';
import { DemoContainer, DemoItem } from '@mui/x-date-pickers/internals/demo';
import { LicenseInfo } from '@mui/x-license';
import axios from 'axios'

LicenseInfo.setLicenseKey('e0d9bb8070ce0054c9d9ecb6e82cb58fTz0wLEU9MzI0NzIxNDQwMDAwMDAsUz1wcmVtaXVtLExNPXBlcnBldHVhbCxLVj0y');
const DQRerun = () => {

    const [sourceTable, setSourceTable] = useState('');
    const [dateRange, setDateRange] = useState([null, null]);

const startDate = dateRange[0] ? new Date(dateRange[0].getTime() - (dateRange[0].getTimezoneOffset() * 60000)) : null;
        const endDate = dateRange[1] ? new Date(dateRange[1].getTime() - (dateRange[1].getTimezoneOffset() * 60000)) : null;
    const handleSubmit = async (event) => {
        event.preventDefault();
        
        try {

let adjustedStartDate = null;
        let adjustedEndDate = null;

        if (dateRange[0] !== null) {
            adjustedStartDate = new Date(dateRange[0]);
            adjustedStartDate.setMinutes(adjustedStartDate.getMinutes() + adjustedStartDate.getTimezoneOffset());
            adjustedStartDate = adjustedStartDate.toISOString().split('T')[0];
        }

        if (dateRange[1] !== null) {
            adjustedEndDate = new Date(dateRange[1]);
            adjustedEndDate.setMinutes(adjustedEndDate.getMinutes() + adjustedEndDate.getTimezoneOffset());
            adjustedEndDate = adjustedEndDate.toISOString().split('T')[0];
        }

const startDate = dateRange[0] ? new Date(dateRange[0].getFullYear(), dateRange[0].getMonth(), dateRange[0].getDate()) : null;
        const endDate = dateRange[1] ? new Date(dateRange[1].getFullYear(), dateRange[1].getMonth(), dateRange[1].getDate()) : null;
            // Make a POST request to your backend endpoint
            const response = await axios.post('http://tdcldizcva002.ebiz.verizon.com:8009/DTRanReRunView/', {
                SRC_TBL: sourceTable,
                START_DATE: dateRange[0],
                END_DATE: dateRange[1]
            });

            // Handle successful response
            console.log('Form submitted successfully');
            console.log('Response:', response.data);
        } catch (error) {
            // Handle error
            console.error('Error submitting form:', error);
        }
    };


    return (<>

        <Container maxWidth="xxl">
            <Container maxWidth="" sx={{ 'marginTop': 2 }}>
                <Breadcrumb>
                    <Breadcrumb.Item active>Profiling Services</Breadcrumb.Item>
                    <Breadcrumb.Item active><span className='fw-bold'>DQ Rerun</span></Breadcrumb.Item>
                </Breadcrumb>
            </Container>
            <Container style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: "center" }}>
                <Typography variant="h4" sx={{ color: '#EE0000', marginBottom: 2, textAlign: "center" }}>DQ Rerun</Typography>
                <form onSubmit={handleSubmit}>

                    <Stack direction="column"
                        justifyContent="space-between"
                        alignItems="center"
                        spacing={2}>

                        <FormControl sx={{ margin: 2, width: 485 }}>
                            <FormLabel sx={{ fontWeight: 'bold' }}>Source Table</FormLabel>
                            <OutlinedInput placeholder="Please enter text"  value={sourceTable}
                            onChange={(e) => setSourceTable(e.target.value)}/>
                        </FormControl>

                        <LocalizationProvider dateAdapter={AdapterDayjs} >
                            <DemoItem label={<span className='fw-bold'>Date Range</span>}>
                                <DemoContainer components={['DateRangePicker']} label="Uncontrolled picker">
                                    <DateRangePicker localeText={{ start: 'Start', end: 'End' }}
                                    value={dateRange}
                                    onChange={(newValue) => setDateRange(newValue)} />
                                </DemoContainer>
                            </DemoItem>
                        </LocalizationProvider>

                        <Button type="submit" variant="outlined" color="error" sx={{ marginTop: 2 }}>
                            Submit
                        </Button>

                    </Stack>

                </form>
            </Container>
            <Container>

            </Container>
        </Container>
    </>)
}
export default DQRerun






{SRC_TBL: "DUMMY", START_DATE: "2023-12-31T18:30:00.000Z", END_DATE: "2024-01-09T18:30:00.000Z"}



npm install @mui/x-date-pickers-pro @mui/x-date-pickers @mui/x-date-pickers/AdapterDayjs @mui/x-date-pickers/LocalizationProvider


PS C:\project\DQ_bootstrap\dataQuality> npm install @mui/x-date-pickers @mui/x-date-pickers/AdapterDayjs @mui/x-date-pickers/LocalizationProvider
npm ERR! code ENOENT
npm ERR! syscall open
npm ERR! path C:\project\DQ_bootstrap\dataQuality\@mui\x-date-pickers\AdapterDayjs/package.json
npm ERR! errno -4058
npm ERR! enoent ENOENT: no such file or directory, open 'C:\project\DQ_bootstrap\dataQuality\@mui\x-date-pickers\AdapterDayjs\package.json'
npm ERR! enoent This is related to npm not being able to find a file.
npm ERR! enoent

npm ERR! A complete log of this run can be found in: C:\Users\raodago\AppData\Local\npm-cache\_logs\2024-04-24T16_51_16_752Z-debug-0.log

npm install @mui/x-date-pickers @mui/x-date-pickers/AdapterDayjs @mui/x-date-pickers/LocalizationProvider

x0jTPl0USVkVZV0SsMjM1kDNyADM5cjM2ETPZJVSQhVRsIDN0YTM6IVREJ1T0b9586ef25c9853decfa7709eee27a1e

61628ce74db2c1b62783a6d438593bc5Tz1NVUktRG9jLEU9MTY4MzQ0NzgyMTI4NCxTPXByZW1pdW0sTE09c3Vic2NyaXB0aW9uLEtWPTI=

e0d9bb8070ce0054c9d9ecb6e82cb58fTz0wLEU9MzI0NzIxNDQwMDAwMDAsUz1wcmVtaXVtLExNPXBlcnBldHVhbCxLVj0y

import { LicenseKey } from '@mui/x-license-key';

<LicenseKey value="YOUR_LICENSE_KEY_HERE" />



