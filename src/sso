router.get("/test", function(req,res)
{
  const VZID  = req.headers['vzid'];
  const FIRSTNAME = req.headers['firstname'];
  const LASTNAME = req.headers['lastname'];
  const EMAIL = req.headers['email'];
  const EID = req.headers['eid'];
  // console.log("Logging Headers ::: "+headerValue);
  console.log(req.headers);
  // res.send("Tested");
  const data = {
    vzid : VZID,
    firstname : FIRSTNAME,
    lastname : LASTNAME,
    email : EMAIL,
    eid : EID
  }
  res.setHeader('Content-Type','application/json');
  res.end(JSON.stringify(data));
});
[7:18 PM] <%
    java.util.Enumeration headerNames = request.getHeaderNames();
    while(headerNames.hasMoreElements()) {
        String headerName = (String)headerNames.nextElement();
        
%>
            <tr>
                <td><%=headerName%></td>
                <td><%=request.getHeader(headerName)%></td>
            </tr>
<%
    }
%>

urlpatterns = [
    path('test', test_view, name='test'),
]

from django.http import JsonResponse

def test_view(request):
    if request.method == 'GET':
        # Retrieve headers from the request
        vzid = request.headers.get('vzid')
        firstname = request.headers.get('firstname')
        lastname = request.headers.get('lastname')
        email = request.headers.get('email')
        eid = request.headers.get('eid')

        # Prepare data dictionary
        data = {
            'vzid': vzid,
            'firstname': firstname,
            'lastname': lastname,
            'email': email,
            'eid': eid
        }

        # Return JSON response
        return JsonResponse(data)
    else:
        # Handle unsupported request methods
        return JsonResponse({'error': 'Method not allowed'}, status=405)



import React, { useState, useEffect } from 'react';
import axios from 'axios';

function UserDetails() {
  const [userDetails, setUserDetails] = useState({});

  useEffect(() => {
    async function fetchUserDetails() {
      try {
        const response = await axios.get('/test');
        setUserDetails(response.data);
      } catch (error) {
        console.error('Error fetching user details:', error);
      }
    }
    fetchUserDetails();
  }, []);

  return (
    <div>
      <h2>User Details</h2>
      <table>
        <tbody>
          {Object.entries(userDetails).map(([key, value]) => (
            <tr key={key}>
              <td>{key}</td>
              <td>{value}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

export default UserDetails;

Configure Tomcat as Reverse Proxy:
Configure Tomcat to act as a reverse proxy to forward requests to Gunicorn. You can do this by adding a new <Host> element in Tomcat's server.xml configuration file with appropriate <Context> elements to define the proxy rules.Here's an example configuration:
xml
Copy code
<Host name="your-domain.com" appBase="webapps">
    <Context path="/" docBase="your-react-app-directory" />
    <Context path="/api" proxyName="localhost" proxyPort="8000" />
</Host>
Replace "your-domain.com" with your actual domain name, "your-react-app-directory" with the directory containing your React files deployed on Tomcat, and "localhost:8000" with the hostname and port where Gunicorn is running your Django application.
